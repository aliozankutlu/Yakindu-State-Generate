/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef STATECHART3_H_
#define STATECHART3_H_

#ifdef __cplusplus
extern "C" { 
#endif

/*!
* Forward declaration for the Statechart3 state machine.
*/
typedef struct Statechart3 Statechart3;

/*!
* Forward declaration of the data structure for the Statechart3Iface interface scope.
*/
typedef struct Statechart3Iface Statechart3Iface;

#ifdef __cplusplus
}
#endif

#include "sc_types.h"
#include "Statechart_required.h"

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file Header of the state machine 'Statechart3'.
*/

#ifndef SC_INVALID_EVENT_VALUE
#define SC_INVALID_EVENT_VALUE 0
#endif
/*! Define number of states in the state enum */
#define STATECHART3_STATE_COUNT 1

/*! Define dimension of the state configuration vector for orthogonal states. */
#define STATECHART3_MAX_ORTHOGONAL_STATES 1

/*! Define indices of states in the StateConfVector */
#define SCVI_STATECHART3_MYREGION_START 0



/*! Enumeration of all states */ 
typedef enum
{
	Statechart3_last_state,
	Statechart3_myRegion_start
} Statechart3States;




/*! Type declaration of the data structure for the Statechart3Iface interface scope. */
struct Statechart3Iface
{
	Statechart* state1;
	Statechart* state2;
};






/*! 
 * Type declaration of the data structure for the Statechart3 state machine.
 * This data structure has to be allocated by the client code. 
 */
struct Statechart3
{
	Statechart3States stateConfVector[STATECHART3_MAX_ORTHOGONAL_STATES];
	Statechart3Iface iface;
	sc_boolean isExecuting;
};



/*! Initializes the Statechart3 state machine data structures. Must be called before first usage.*/
extern void statechart3_init(Statechart3* handle);


/*! Activates the state machine. */
extern void statechart3_enter(Statechart3* handle);

/*! Deactivates the state machine. */
extern void statechart3_exit(Statechart3* handle);




/*! Gets the value of the variable 'state1' that is defined in the default interface scope. */ 
extern Statechart* statechart3_get_state1(const Statechart3* handle);
/*! Sets the value of the variable 'state1' that is defined in the default interface scope. */ 
extern void statechart3_set_state1(Statechart3* handle, Statechart* value);
/*! Gets the value of the variable 'state2' that is defined in the default interface scope. */ 
extern Statechart* statechart3_get_state2(const Statechart3* handle);
/*! Sets the value of the variable 'state2' that is defined in the default interface scope. */ 
extern void statechart3_set_state2(Statechart3* handle, Statechart* value);

/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean statechart3_is_active(const Statechart3* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean statechart3_is_final(const Statechart3* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean statechart3_is_state_active(const Statechart3* handle, Statechart3States state);


#ifdef __cplusplus
}
#endif 

#endif /* STATECHART3_H_ */
